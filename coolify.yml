version: '3.8'

networks:
  divino_network:
    driver: bridge

services:
  app:
    build: .
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - APP_NAME=Divino Lanches
      - APP_URL=${APP_URL}
      - APP_DEBUG=false
      - MULTI_TENANT_ENABLED=true
      - UPLOAD_MAX_SIZE=10M
      - ALLOWED_EXTENSIONS=jpg,jpeg,png,gif,pdf,doc,docx
      - EVOLUTION_BASE_URL=http://evolution
      - EVOLUTION_API_KEY=${EVOLUTION_API_KEY}
      - N8N_WEBHOOK_URL=${N8N_WEBHOOK_URL}
    depends_on:
      - postgres
      - redis
      - evolution
    volumes:
      - ./uploads:/var/www/html/uploads
      - ./logs:/var/www/html/logs
    networks:
      - divino_network
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - divino_postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - divino_network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    volumes:
      - divino_redis_data:/data
    networks:
      - divino_network
    restart: unless-stopped

  evolution-db-setup:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    command: ["sh", "-c", "echo 'Starting evolution database setup...' && sleep 15 && echo 'Creating evolution_db database...' && PGPASSWORD=$${POSTGRES_PASSWORD} psql -h postgres -U $${POSTGRES_USER} -d postgres -c 'CREATE DATABASE evolution_db;' || echo 'Database already exists' && echo 'Running Evolution API migrations...' && PGPASSWORD=$${POSTGRES_PASSWORD} psql -h postgres -U $${POSTGRES_USER} -d evolution_db -c \"CREATE TABLE IF NOT EXISTS instances (name VARCHAR(255) PRIMARY KEY, status VARCHAR(50) DEFAULT 'disconnected', qrcode TEXT, webhook_url VARCHAR(500), webhook_by_events BOOLEAN DEFAULT false, webhook_base64 BOOLEAN DEFAULT false, webhook_events TEXT[], reject_calls BOOLEAN DEFAULT false, msg_retry_count_calls INTEGER DEFAULT 3, msg_retry_count_chat INTEGER DEFAULT 3, qrcode_limit INTEGER DEFAULT 30, qrcode_color VARCHAR(7) DEFAULT '#198754', delay_send_message INTEGER DEFAULT 1000, delay_read_message INTEGER DEFAULT 1000, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP); CREATE TABLE IF NOT EXISTS messages (id SERIAL PRIMARY KEY, key_id VARCHAR(255) NOT NULL, remote_jid VARCHAR(255) NOT NULL, from_me BOOLEAN DEFAULT false, message TEXT, message_type VARCHAR(50), status VARCHAR(50), timestamp BIGINT, instance_name VARCHAR(255), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (instance_name) REFERENCES instances(name) ON DELETE CASCADE); CREATE TABLE IF NOT EXISTS contacts (id SERIAL PRIMARY KEY, remote_jid VARCHAR(255) NOT NULL, name VARCHAR(255), notify VARCHAR(255), verified_name VARCHAR(255), is_user BOOLEAN DEFAULT false, is_group BOOLEAN DEFAULT false, is_broadcast BOOLEAN DEFAULT false, instance_name VARCHAR(255), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (instance_name) REFERENCES instances(name) ON DELETE CASCADE); CREATE TABLE IF NOT EXISTS chats (id SERIAL PRIMARY KEY, remote_jid VARCHAR(255) NOT NULL, name VARCHAR(255), is_group BOOLEAN DEFAULT false, is_read_only BOOLEAN DEFAULT false, unread_count INTEGER DEFAULT 0, instance_name VARCHAR(255), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (instance_name) REFERENCES instances(name) ON DELETE CASCADE); CREATE TABLE IF NOT EXISTS groups (id SERIAL PRIMARY KEY, remote_jid VARCHAR(255) NOT NULL, subject VARCHAR(255), description TEXT, owner VARCHAR(255), creation_timestamp BIGINT, instance_name VARCHAR(255), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (instance_name) REFERENCES instances(name) ON DELETE CASCADE); INSERT INTO instances (name, status, webhook_url, webhook_by_events, webhook_events) VALUES ('default', 'disconnected', '', false, ARRAY['connection.update', 'qrcode.updated', 'messages.upsert']) ON CONFLICT (name) DO NOTHING;\" && echo 'Evolution database setup complete'"]
    networks:
      - divino_network
    depends_on:
      - postgres
    restart: "no"

  evolution:
    image: atendai/evolution-api:latest
    environment:
      - DATABASE_PROVIDER=postgresql
      - DATABASE_CONNECTION_URI=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/evolution_db
      - AUTHENTICATION_API_KEY=${EVOLUTION_API_KEY}
      - SERVER_URL=${APP_URL}
      - SERVER_TYPE=http
      - WEBHOOK_GLOBAL_URL=${APP_URL}/webhook/evolution
      - WEBHOOK_GLOBAL_ENABLED=true
      - WEBHOOK_GLOBAL_WEBHOOK_BY_EVENTS=true
      - LOG_LEVEL=ERROR
      - LOG_COLOR=true
      - LOG_BAILEYS=error
      - QRCODE_LIMIT=30
      - QRCODE_COLOR=#198754
      - DELAY_SEND_MESSAGE=1000
      - DELAY_READ_MESSAGE=1000
      - REJECT_CALLS=false
      - MSG_RETRY_COUNT_CALL=3
      - MSG_RETRY_COUNT_CHAT=3
      - WEBHOOK_EVENTS_CONNECTION_UPDATE=true
      - WEBHOOK_EVENTS_QRCODE_UPDATED=true
      - WEBHOOK_EVENTS_MESSAGES_UPSERT=true
      - WEBHOOK_EVENTS_MESSAGES_UPDATE=true
      - WEBHOOK_EVENTS_SEND_MESSAGE=true
      - WEBHOOK_EVENTS_CONTACTS_SET=true
      - WEBHOOK_EVENTS_CONTACTS_UPSERT=true
      - WEBHOOK_EVENTS_CONTACTS_UPDATE=true
      - WEBHOOK_EVENTS_PRESENCE_UPDATE=true
      - WEBHOOK_EVENTS_CHATS_SET=true
      - WEBHOOK_EVENTS_CHATS_UPSERT=true
      - WEBHOOK_EVENTS_CHATS_UPDATE=true
      - WEBHOOK_EVENTS_CHATS_DELETE=true
      - WEBHOOK_EVENTS_GROUPS_UPSERT=true
      - WEBHOOK_EVENTS_GROUP_UPDATE=true
      - WEBHOOK_EVENTS_GROUP_PARTICIPANTS_UPDATE=true
      - WEBHOOK_EVENTS_NEW_JWT_TOKEN=true
      - WEBHOOK_EVENTS_TYPEBOT_START=true
      - WEBHOOK_EVENTS_TYPEBOT_CHANGE_STATUS=true
      - WEBHOOK_EVENTS_CHAMA_AI_ACTION=true
    volumes:
      - divino_evolution_data:/evolution/instances
      - divino_evolution_logs:/evolution/logs
    networks:
      - divino_network
    depends_on:
      - evolution-db-setup
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/manager/health-check"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  divino_postgres_data:
  divino_redis_data:
  divino_evolution_data:
  divino_evolution_logs: